import os
import streamlit as st
from datetime import datetime
import pandas as pd
import cv2
from roboflow import Roboflow
import numpy as np
from PIL import Image

rf = Roboflow(api_key="Oz8zziOQaQHBctzNZknq")  
project = rf.workspace().project("musorki")
model = project.version(4).model 

UPLOAD_FOLDER = "c:/Tula_Hack/Uploaded_Photos"
PROCESSED_FOLDER = "c:/Tula_Hack/Processed_Photos"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
if not os.path.exists(PROCESSED_FOLDER):
    os.makedirs(PROCESSED_FOLDER)

csv_file_path = "c:/Tula_Hack/stats.csv"

df_columns = [
    'Trash_Bin_Id',
    'Date', 'Time', 'District', 'Container Number', 'Status',  
    'Empty Buckets', 'Flooded Buckets', 'Partially Filled Buckets', 
    'Outside Trash', 'Regular Containers', 'Plastic Containers', 'Hopper Containers','Filename'
]

if os.path.exists(csv_file_path):
    stats_df = pd.read_csv(csv_file_path)
else:
    stats_df = pd.DataFrame(columns=df_columns)

st.set_page_config(page_title="–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π", layout="centered")
st.title("üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É–±–æ—Ä–∫–∏")

#–°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
district_codes = {
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": "central",
    "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π": "proletarian",
    "–ó–∞—Ä–µ—á–µ–Ω—Å–∫–∏–π": "zarechensky",
    "–ü—Ä–∏–≤–æ–∫–∑–∞–ª—å–Ω—ã–π": "railway",
    "–°–æ–≤–µ—Ç—Å–∫–∏–π": "soviet"
}

status_codes = {
    "–î–æ —É–±–æ—Ä–∫–∏": "00",
    "–ü–æ—Å–ª–µ —É–±–æ—Ä–∫–∏": "01"
}

#–§–æ—Ä–º–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
with st.form("upload_form"):
    st.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", type=["jpg", "jpeg", "png", "gif"])
    
    status = st.selectbox("–°—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", ["–î–æ —É–±–æ—Ä–∫–∏", "–ü–æ—Å–ª–µ —É–±–æ—Ä–∫–∏"])
    
    district = st.selectbox(
        "–†–∞–π–æ–Ω",
        ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π", "–ó–∞—Ä–µ—á–µ–Ω—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–∫–∑–∞–ª—å–Ω—ã–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π"]
    )
    
    date = st.date_input("–î–∞—Ç–∞ —Å—ä–µ–º–∫–∏", datetime.today())
    time = st.time_input("–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏", datetime.now())
    
    container_number = st.text_input("–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", "")
    
    submitted = st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
if submitted:
    if not uploaded_file:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    elif not container_number.strip():
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
    else:
        index = len(stats_df) + 1 
        file_name = f"{date.strftime('%Y%m%d')}_{container_number}_{district_codes[district]}_{status_codes[status]}_{str(index).zfill(6)}_{time.strftime('%H%M')}.jpg"
        
        file_path = os.path.join(UPLOAD_FOLDER, file_name)
        
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        st.success("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        st.write("üìÖ **–î–∞—Ç–∞ —Å—ä–µ–º–∫–∏:**", date)
        st.write("‚è∞ **–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏:**", time)
        st.write("üìç **–†–∞–π–æ–Ω:**", district)
        st.write("üì¶ **–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:**", container_number)
        st.write("üñº **–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫:**", file_name)
        
        st.image(file_path, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

        img = Image.open(file_path)
        img_array = np.array(img)

        prediction = model.predict(file_path, confidence=40, overlap=30)

        processed_file_name = f"predictions_{file_name}"
        processed_file_path = os.path.join("c:/Tula_Hack/Processed_Photos", processed_file_name)
        prediction.save(processed_file_path)

        st.image(processed_file_path, caption = "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width = True)

        #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç
        if prediction:
            boxes = prediction.json().get("predictions", [])
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            empty_buckets = 0
            flooded_buckets = 0
            partially_filled_buckets = 0
            outside_trash = 0
            regular_containers = 0
            plastic_containers = 0
            hopper_containers = 0
            
            #–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            for item in boxes:
                if item['class'] == 'empty_trasher':
                    empty_buckets += 1
                elif item['class'] == 'flooded_trasher':
                    flooded_buckets += 1
                elif item['class'] == 'partially-filled_trasher':
                    partially_filled_buckets += 1
                elif item['class'] == 'outside_trash':
                    outside_trash += 1
                elif item['class'] == 'regular_container':
                    regular_containers += 1
                elif item['class'] == 'plastic_container':
                    plastic_containers += 1
                elif item['class'] == 'hopper_container':
                    hopper_containers += 1
            
            #–§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            new_row = {
                'Trash_Bin_Id':index,
                'Date': date,
                'Time': time,
                'District': district_codes[district],
                'Container Number': container_number,
                'Status': status_codes[status],
                'Empty Buckets': empty_buckets,
                'Flooded Buckets': flooded_buckets,
                'Partially Filled Buckets': partially_filled_buckets,
                'Outside Trash': outside_trash,
                'Regular Containers': regular_containers,
                'Plastic Containers': plastic_containers,
                'Hopper Containers': hopper_containers,
                'Filename': file_name
            }

            new_row_df = pd.DataFrame([new_row])

            stats_df = pd.concat([stats_df, new_row_df], ignore_index=True)

            #–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame –≤ CSV
            stats_df.to_csv(csv_file_path, index=False)

            st.write("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")